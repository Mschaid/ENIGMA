digraph ProjectFlow {
  node [shape=box, style="filled, rounded", fillcolor="#E6ECF0", fontname="Arial", fontsize=12];
  edge [color="#172B4D", arrowhead="open", fontname="Arial", fontsize=10];

  subgraph cluster_getting_started {
    style=filled;
    label="Getting Started with Azure";
    color="#F5F7FA";
    signup [label="Sign up for Azure account"];
    install_sdk [label="Install Azure SDK for Python"];
    create_services [label="Create Azure storage and database services"];
    configure_auth [label="Configure authentication and access keys"];
    signup -> install_sdk -> create_services -> configure_auth;
  }

  subgraph cluster_ingestion_migration {
    style=filled;
    label="Data Ingestion and Migration";
    color="#C2E0C6";
    read_data [label="Read local data"];
    identify_types [label="Identify file types"];
    load_data [label="Load data into memory"];
    establish_connection [label="Establish Azure connection"];
    upload_data [label="Upload data to Azure"];
    choose_storage [label="Choose Azure storage service"];
    organize_data [label="Organize data"];
    read_data -> identify_types -> load_data -> establish_connection -> upload_data -> choose_storage -> organize_data;
  }

  subgraph cluster_aggregation_storage {
    style=filled;
    label="Data Aggregation and Storage";
    color="#E6D9A8";
    choose_database [label="Choose Azure database service"];
    setup_database [label="Set up Azure database"];
    define_schema [label="Define database schema"];
    aggregate_data [label="Aggregate data from uploaded files"];
    store_data [label="Store data in database tables"];
    choose_storage -> setup_database -> define_schema -> aggregate_data -> store_data;
  }

  subgraph cluster_preprocessing_ml {
    style=filled;
    label="Preprocessing and Machine Learning";
    color="#D3C4F3";
    choose_ml_service [label="Choose Azure ML service"];
    setup_workspace [label="Set up Azure ML workspace"];
    configure_resources [label="Configure resources"];
    create_pipelines [label="Create preprocessing pipelines"];
    perform_preprocessing [label="Perform data preprocessing"];
    train_optimize [label="Train and optimize models"];
    establish_connection -> choose_ml_service -> setup_workspace -> configure_resources -> create_pipelines -> perform_preprocessing -> train_optimize;
  }

  subgraph cluster_feature_importance {
    style=filled;
    label="Feature Importance and Visualization";
    color="#F0C9D1";
    use_techniques [label="Use feature importance techniques"];
    analyze_influence [label="Analyze feature influence"];
    create_visualizations [label="Create visualizations"];
    interpret_results [label="Interpret results"];
    train_optimize -> use_techniques -> analyze_influence -> create_visualizations -> interpret_results;
  }

  subgraph cluster_model_deployment {
    style=filled;
    label="Model Deployment and User Querying";
    color="#C5E9F6";
    choose_framework [label="Choose web framework"];
    create_api [label="Create RESTful API"];
    package_deploy [label="Package and deploy model"];
    build_web_interface [label="Build web interface with PyReact"];
    host_application [label="Host web application"];
    interpret_results -> choose_framework -> create_api
